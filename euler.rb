#!/usr/bin/env ruby

# Project Euler in Ruby (1.8.5)
# John Evans <john@jpevans.com>

require 'rational'

# Euler #1
# Answer: 233168
#
# If we list all the natural numbers below 10 that are multiples of 3 or 5,
# we get 3, 5, 6 and 9. The sum of these multiples is 23.
#
# Find the sum of all the multiples of 3 or 5 below 1000.

def euler1
    (1..999).select { |n| n % 3 == 0 or n % 5 == 0 }.inject(0) { |a,b| a + b }
end


# Euler #2
# Answer: 4613732
#
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# Find the sum of all the even-valued terms in the sequence which do not
# exceed four million.

def euler2
    n, a, b = 2, 1, 2
    while true do
        c = a + b
        if c > 4000000
            break
        end
        if c % 2 == 0
            n = n + c
        end
        a, b = b, c
    end
    n
end

# Euler #3
# Answer: 6857
#
# The prime factors of 13195 are 5, 7, 13 and 29.
#
# What is the largest prime factor of the number 600851475143 ?

class Fixnum
    def prime?
        if self == 2
            return true
        end
        (2..(Math.sqrt(self).ceil)).each do |possible_factor|
            if self % possible_factor == 0
                return false
            end
        end
        return true
    end
end


def euler3
    target = 600851475143
    Math.sqrt(target).ceil.downto(2) do |n|
        if target % n == 0 and n.prime?
            return n
        end
    end
end

# Problem #4
# Answer: 906609
#
# A palindromic number reads the same both ways. The largest
# palindrome made from the product of two 2-digit numbers is 9009 =
# 91 99.
#
# Find the largest palindrome made from the product of two 3-digit
# numbers.

class Fixnum
    def palindrome?
        "#{self}" == "#{self}".reverse
    end
end


def euler4
    result = 0
    (100..999).each do |a|
        (100..999).each do |b|
            p = a * b
            if p > result and p.palindrome?
                result = p
            end
        end
    end
    result
end


# Problem #5
# Answer: 232792560
#
# 2520 is the smallest number that can be divided by each of the
# numbers from 1 to 10 without any remainder.
#
# What is the smallest number that is evenly divisible by all of the
# numbers from 1 to 20?

def euler5
    (1..20).inject(1) { |result, n| result.lcm n }
end


# Problem #6
# Answer: 25164150
#
# The sum of the squares of the first ten natural numbers is,
#     1² + 2² + ... + 10² = 385
# The square of the sum of the first ten natural numbers is,
#     (1 + 2 + ... + 10)² = 55² = 3025
# Hence the difference between the sum of the squares of the first
# ten natural numbers and the square of the sum is 3025 - 385 = 2640.
#
# Find the difference between the sum of the squares of the first one
# hundred natural numbers and the square of the sum.

def euler6
    sum = sum_of_squares = 0
    1.upto(100) do |n|
        sum += n
        sum_of_squares += n * n
    end
    (sum * sum) - sum_of_squares
end


# Problem #7
# Answer: 104743
#
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
#
# What is the 10001st prime number?

def euler7
    n = 2
    primes = []
    result = 0
    while true do
        is_prime = true
        primes.each do |v|
            if n % v == 0 then
                is_prime = false
                break
            end
        end
        if is_prime then
            if primes.length >= 10000 then
                result = n
                break
            end
            primes.push(n)
        end
        n = n + 1
    end
    result
end

# Problem #9
# Answer: 31875000
# 
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
# a^2 + b^2 = c^2
# For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

def euler9
  (2..1000).each do |b|
    (1...b).each do |a|
      c = Math.sqrt(a**2 + b**2)
      return (a*b*c).to_i if a + b + c == 1000
    end
  end
end

MAX_EULER = 7

if __FILE__ == $0
    if ARGV.length > 0
        for arg in ARGV
            puts "#{arg}: #{eval("euler#{arg}")}"
        end
    else
        1.upto(MAX_EULER) do |n|
            puts "#{n}: #{eval("euler#{n}")}"
        end
    end
end
